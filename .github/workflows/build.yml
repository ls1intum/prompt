name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./client/Dockerfile
            image: ghcr.io/ls1intum/prompt/prompt-client
            context: ./client
            path: client
          - dockerfile: ./server/Dockerfile
            image: ghcr.io/ls1intum/prompt/prompt-server
            context: ./server
            path: server
    outputs:
      image_tag: ${{ steps.output-tag.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed files in the client folder
        id: changed-files-client-folder
        uses: tj-actions/changed-files@v36
        with:
          files: client/*

      - name: Get changed files in the server folder
        id: changed-files-server-folder
        uses: tj-actions/changed-files@v36
        with:
          files: server/*

      - name: Log in to the Container registry
        if: ${{ (steps.changed-files-client-folder.outputs.any_changed == 'true') || (steps.changed-files-server-folder.outputs.any_changed == 'true') }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        if: ${{ (steps.changed-files-client-folder.outputs.any_changed == 'true') || (steps.changed-files-server-folder.outputs.any_changed == 'true') }}
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Install Docker Buildx
        if: ${{ (steps.changed-files-client-folder.outputs.any_changed == 'true') || (steps.changed-files-server-folder.outputs.any_changed == 'true') }}
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Compute Tag
        uses: actions/github-script@v6
        id: compute-tag
        with:
          result-encoding: string
          script: |
            if (context.eventName === "pull_request") {
              return "pr-" + context.issue.number;
            }
            if (context.eventName === "push") {
              if (context.ref.startsWith("refs/tags/")) {
                return context.ref.slice(10);
              }
              if (context.ref === "refs/heads/develop") {
                return "develop";
              }
            }
            return "latest";

      - id: output-tag
        run: echo "image_tag=${{ steps.compute-tag.outputs.result }}" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker Image
        uses: docker/build-push-action@v4
        if: ${{ (steps.changed-files-client-folder.outputs.any_changed == 'true' && matrix.path == 'client') || (steps.changed-files-server-folder.outputs.any_changed == 'true' && matrix.path == 'server') }}
        env:
          IMAGE_TAG: ${{ steps.compute-tag.outputs.result }}
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ matrix.image }}:${{ env.IMAGE_TAG }}
          build-args: |
            "SERVER_HOST=${{ vars.SERVER_HOST }}"
            "KEYCLOAK_HOST=${{ vars.KEYCLOAK_HOST }}"
            "KEYCLOAK_REALM_NAME=${{ vars.KEYCLOAK_REALM_NAME }}"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: https://${{ vars.SERVER_HOST }}
    steps:
      - name: SSH to VM and Execute Docker-Compose Down
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_host: ${{ vars.PROXY_HOST }}
          proxy_username: ${{ vars.PROXY_USERNAME }}
          proxy_key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_port: ${{ vars.PROXY_PORT }}
          script: |
            docker compose -f docker-compose.prod.yml --env-file=.env.prod down --remove-orphans --rmi all

      - name: checkout
        uses: actions/checkout@v3

      - name: 'Create main.cf and master.cf file'
        run: |
          echo "${{ vars.POSTFIX_MAIN_CF }}" > main.cf
          echo "${{ vars.POSTFIX_MASTER_CF }}" > master.cf

      - name: Copy Docker Compose File From Repo to VM Host
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_host: ${{ vars.PROXY_HOST }}
          proxy_username: ${{ vars.PROXY_USERNAME }}
          proxy_key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_port: ${{ vars.PROXY_PORT }}
          source: "./docker-compose.prod.yml"
          target: /home/${{ vars.VM_USERNAME }}

      - name: Copy main.cf to VM Host
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_host: ${{ vars.PROXY_HOST }}
          proxy_username: ${{ vars.PROXY_USERNAME }}
          proxy_key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_port: ${{ vars.PROXY_PORT }}
          source: "main.cf"
          target: /home/${{ vars.VM_USERNAME }}/postfix-config/

      - name: Copy master.cf to VM Host
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_host: ${{ vars.PROXY_HOST }}
          proxy_username: ${{ vars.PROXY_USERNAME }}
          proxy_key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_port: ${{ vars.PROXY_PORT }}
          source: "master.cf"
          target: /home/${{ vars.VM_USERNAME }}/postfix-config/

      - name: Compute Tag
        uses: actions/github-script@v6
        id: compute-tag
        with:
          result-encoding: string
          script: |
            if (context.eventName === "pull_request") {
              return "pr-" + context.issue.number;
            }
            if (context.eventName === "push") {
              if (context.ref.startsWith("refs/tags/")) {
                return context.ref.slice(10);
              }
              if (context.ref === "refs/heads/develop") {
                return "develop";
              }
            }
            return "latest";

      - name: SSH to VM and create .env.prod file
        uses: appleboy/ssh-action@v0.1.10
        env:
          # TODO IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
          IMAGE_TAG: latest
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_host: ${{ vars.PROXY_HOST }}
          proxy_username: ${{ vars.PROXY_USERNAME }}
          proxy_key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_port: ${{ vars.PROXY_PORT }}
          script: |
            touch .env.prod            
            echo "ATLASSIAN_USERNAME=${{ vars.ATLASSIAN_USERNAME }}" > .env.prod
            echo "ATLASSIAN_PASSWORD=${{ secrets.ATLASSIAN_PASSWORD }}" >> .env.prod
            echo "JIRA_URL=${{ vars.JIRA_URL }}" >> .env.prod
            echo "BITBUCKET_URL=${{ vars.BITBUCKET_URL }}" >> .env.prod
            echo "BAMBOO_URL=${{ vars.BAMBOO_URL }}" >> .env.prod
            echo "CONFLUENCE_URL=${{ vars.CONFLUENCE_URL }}" >> .env.prod

            echo "SPRING_DATASOURCE_URL=${{ vars.SPRING_DATASOURCE_URL }}" >> .env.prod
            echo "SPRING_DATASOURCE_USERNAME=${{ vars.SPRING_DATASOURCE_USERNAME }}" >> .env.prod
            echo "SPRING_DATASOURCE_PASSWORD=${{ vars.SPRING_DATASOURCE_PASSWORD }}" >> .env.prod

            echo "SERVER_HOST=${{ vars.SERVER_HOST }}" >> .env.prod
            echo "CLIENT_HOST=${{ vars.CLIENT_HOST }}" >> .env.prod

            echo "KEYCLOAK_HOST=${{ vars.KEYCLOAK_HOST }}" >> .env.prod
            echo "KEYCLOAK_ISSUER_URI=${{ vars.KEYCLOAK_HOST }}/realms/${{ vars.KEYCLOAK_REALM_NAME }}" >> .env.prod
            echo "KEYCLOAK_JWK_SET_URI=${{ vars.KEYCLOAK_HOST }}/realms/${{ vars.KEYCLOAK_REALM_NAME }}/protocol/openid-connect/certs" >> .env.prod
            echo "KEYCLOAK_CLIENT_SECRET=${{ secrets.KEYCLOAK_CLIENT_SECRET }}" >> .env.prod

            echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> .env.prod

      - name: SSH to VM and Execute Docker-Compose Up
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_host: ${{ vars.PROXY_HOST }}
          proxy_username: ${{ vars.PROXY_USERNAME }}
          proxy_key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_port: ${{ vars.PROXY_PORT }}
          script: |
            echo "${{ secrets.HARBOR_PASSWORD }}" | docker login harbor.ase.in.tum.de/postfix -u '${{ vars.HARBOR_USER }}' --password-stdin
            docker compose -f docker-compose.prod.yml --env-file=.env.prod up --pull=always -d
    